#!/bin/sh
# shellcheck disable=SC2183,SC2030,SC2086,SC2181,SC2031
currentVersion="v1.0"; rev_date="2 Jan 2023"; mp="$HOME/.sendwa"; envfile="$mp/file.env"
sendthisjson="$mp/temporary.json"; truenv="$mp/sw.env"
[ -f "$envfile" ] && . $envfile
# Required Function
is_installed() { command -v $1 >/dev/null 2>&1; }
_logger() {
  [ "$1" = "n" ] && { _ns="\n" && shift ; }
  printf "%b${ns}" "${clyl}${_not_interactive:+$(date +"[%D %T]") }${csky}$*${creset}" && unset _ns
}
_dogger() {
  [ "$1" = "n" ] && { _ns="\n" && shift ; }
  >&2 printf "%b${ns}" "${clyl}${_not_interactive:+$(date +"[%D %T]") }${cred}$*${creset}" && unset _ns
}
_checkmark() {
  printf "\033[55G%b\n" "${cgreen}[V]${creset}"
}
_crossmark() {
  printf "\033[55G%b\n" "${cred}[X]${creset}"
}
_packjson() {
  echo "[]" > $sendthisjson
  _argNumber="$1"
  _argText="$2"
  $jq --arg thephone "$_argNumber" --arg thetext "$_argText" \
  '. += [{"recipient_type":"individual","to":"\($thephone)","type":"text","text":{"body": "\($thetext)"}}]' $sendthisjson > /tmp/temp.json && mv /tmp/temp.json $sendthisjson
}
_ask_input() {
  _question="$1"
  _thevar="$2"
  say "$_question" && read -r ${_thevar}
}
cleanup() {
  tput cnorm
  tput sgr0
  rm -f $sendthisjson
}
trap 'cleanup; trap - EXIT; exit' EXIT INT HUP
# End Required Function
disable_color() {
  unset cred cgreen cyellw cblue cyan csky clyl creset
}
if ! is_installed perl; then
  disable_color
  die "Continuing without color as perl is not found"
elif [ "$(tput colors)" -ne "256" ]; then
  disable_color
  die "Continuing without color as your terminal does not support 256 colors"
else
  if [ -t 1 ]; then
    # Non bold
    cred=$(tput sgr0; tput setaf 1 ${is_bsd:+0 0}); clyl=$(tput sgr0; tput setaf 11 ${is_bsd:+0 0})
    cgreen=$(tput sgr0; tput setaf 2 ${is_bsd:+0 0}); cyan=$(tput sgr0; tput setaf 6 ${is_bsd:+0 0})
    cyellw=$(tput sgr0; tput setaf 215 ${is_bsd:+0 0}); csky=$(tput sgr0; tput setaf 14 ${is_bsd:+0 0})
    # Reset color
    creset=$(tput sgr0)
  else
    disable_color
  fi
fi
# Prioritize curl over wget
if is_installed curl; then
  # 0 Implies curl
  _filegrab="c"
elif is_installed wget; then
  # 1 Implies wget
  _filegrab="w"
else
  diep "Neither wget nor curl is exist" "Please install it first"
  exit 1
fi
detect_profile() {
  if [ -n "$PROFILE" -a -f "$PROFILE" ]; then
    echo "$PROFILE"
    return
  fi
  detected_profile=''
  shelltype="$(basename "/$SHELL")"

  if [ "$shelltype" = "bash" ]; then
    if [ -f "$HOME/.bashrc" ]; then
      detected_profile="$HOME/.bashrc"
    elif [ -f "$HOME/.bash_profile" ]; then
      detected_profile="$HOME/.bash_profile"
    fi
  elif [ "$shelltype" = "zsh" ]; then
    detected_profile="$HOME/.zshrc"
  fi

  if [ -z "$detected_profile" ]; then
    if [ -f "$HOME/.profile" ]; then
      detected_profile="$HOME/.profile"
    elif [ -f "$HOME/.bashrc" ]; then
      detected_profile="$HOME/.bashrc"
    elif [ -f "$HOME/.bash_profile" ]; then
      detected_profile="$HOME/.bash_profile"
    elif [ -f "$HOME/.zshrc" ]; then
      detected_profile="$HOME/.zshrc"
    fi
  fi
  echo "$detected_profile"
}
_send() {
  if [ "$_filegrab" = "c" ]; then
    _httpcode=$(
    curl -w "%{http_code}" -s -o /dev/null \
    --location --request POST "$WA_API_URL" \
    --header "Authorization: Bearer ${WA_API_KEY}" \
    --data-binary "@${sendthisjson}"
    )
    if [ "_$_httpcode" = 200 ]; then _logger "Successfully sent message !" && return 0; else _dogger "Request failed to get through !" && return 1; fi
  elif [ "$_filegrab" = "w" ]; then
    wget --no-check-certificate -qO /dev/null \
    --method POST --timeout=0 \
    --header "Authorization: Bearer ${WA_API_KEY}" \
    --body-file="${sendthisjson}" "$WA_API_URL"
    if [ $? -eq 0 ]; _then logger "Successfully sent message !" && return 0; else _dogger "Request failed to get through !" && return 1; fi
  fi
}
_send_test() {
  if [ "$_filegrab" = "c" ]; then
    curl --location --request POST "$wa_api_url" \
    --header "Authorization: Bearer ${wa_api_key}" \
    --data-raw '{ "recipient_type": "individual", "to": "'"$wa_test_phone_number"'", "type": "text", "text": { "body": "If you receive this message, this means the test is successful" }
    }'
  elif [ "$_filegrab" = "w" ]; then
    wget --no-check-certificate --quiet \
    --output /dev/null \
    --method POST \
    --timeout=0 \
    --header "Authorization: Bearer ${wa_api_key}" \
    --body-data '{ "recipient_type": "individual", "to": "'"$wa_test_phone_number"'", "type": "text", "text": { "body": "If you receive this message, this means the test is successful" }
  }' "$wa_api_url"
  fi
}
install() {
  # Install configuration file
  header_intro
  _logger "Creating configuration file on $mp"
  mkdir -p $mp/contact $mp/logs
  cp ./sw.env $truenv 2>/dev/null
  [ $? -eq 0 ] && _checkmark || { _crossmark; exit 0 ; }
  # Install file
  _logger "Install the script to $mp"
  _profile="$(detect_profile)"
  if [ "$_profile" ]; then
    cp "$(readlink -f $0)" "${mp}/sendwa.sh"; chmod u+x "${mp}/sendwa.sh"
    echo "alias sendwa=\"$mp/sendwa.sh\"" >> $_profile
  fi
  [ $? -eq 0 ] && _checkmark || { _crossmark; exit 0 ; }
  _ask_input "Please insert your API URL: " wa_api_url
  _ask_input "Please insert your API Key: " wa_api_key
  _ask_input "Please insert your (international) phone number: " wa_test_phone_number
  _logger "Testing your configuration..."
  _send_test
  [ $? -eq 0 ] && _checkmark || { _crossmark; exit 0 ; }
  # Putting api config to env file
  cat <<EOF > $envfile
# DO NOT REMOVE THIS FILE UNDER ANY CIRCUMSTANCE
WA_API_KEY="$wa_api_key"
WA_API_URL="$wa_api_url"
WA_ALIAS_LOCATION="$_profile"
EOF
  # Closing
  _logger n "SendWA has been installed in $mp"
  _logger n "This script will self delete in 2 secs"; sleep 2; rm -f -- "$0"
}
uninstall() {
  # Remove alias from sourced file
  [ -f "$envfile" ] && . $envfile || { _dogger n "Something went wrong please retry" && exit 1 }
  _logger "Removing SendWA alias from $WA_ALIAS_LOCATION"
  grep -v "alias sendwa=\"$mp/sendwa.sh\"" $WA_ALIAS_LOCATION > /tmp/temp_bashrc && mv /tmp/temp_bashrc $WA_ALIAS_LOCATION
  [ $? -eq 0 ] && _checkmark || { _crossmark; exit 0 ; }
  _logger "Removing directory $mp"
  [ $? -eq 0 ] && _checkmark || { _crossmark; exit 0 ; }
}
formphone() {
  case "$phonelist" in
    *,*)
    phonelist=$(echo "$phonelist" | tr -d '[:space:]' | tr ',' ' ')
    for phone in $phonelist; do
      if [ -z "${phone##*[!0-9]*}" ]; then
        _dogger "$phone must be valid number" && continue
      else
        _packjson "$phone" "$text"
      fi
    done
      ;;
    *)
    if [ -z "${phonelist##*[!0-9]*}" ]; then
      _dogger "$phonelist must be valid number" && continue
    else
      _packjson "$phone" "$text"
    fi
      ;;
  esac
}
interactive() {
  # Ask phone number to
  _ask_input "Target phone number: " _arg_target_number
  # Ask string to be sent
  _ask_input "Type string to send: " _arg_target_string
  # Validate the variable
  if [ "$arg_target_number" ] && [ "$arg_target_string" ]; then
    _packjson "$_arg_target_number" "$_arg_target_string" && _send
  else
    _dogger n "One of the input is empty"; exit 1
  fi
}
# BEGIN OPTION PARSING
display_help() {
  cat <<'EOT'
  Usage: sendwa [options]
  Options:
  -o, --output            Save results to file in input directory (default: Current directory)
  -k, --keep-file         Keep ent related files after successful run (default: Remove)
  -c, --color=ARG         Enable or disable colored output (Valid ARG: yes, no, force)
  -7, --use-env           Use environmental file in place of regular option
  -6, --speedtest         Prefer speedtest in place of iperf3
  -5, --region            Enable region based network test, otherwise will use mixed source
  -r, --region=ARG        Specify region (Valid ARG: asia, africa, europe, northamerica, southamerica, oceania, mixed)
  -j, --json              Save result as json
  -i, --skip-ip           Skip IP blacklist check
  -s, --skip-service      Skip internet service block check
  -n, --show-ip           Display server public IP address
  -h, --help              Display this help section
  -v, --version           Display version
EOT
}
usage_error () { printf "%s\n%s\n" "$1" "Try 'sendwa --help' to view available option" >&2; exit 2; }
assert_argument () { { test "$1" != "$endofline" && case "$1" in -*) >&2 printf "%s\n" "$opt: Illegal input parameter ($1)"; exit 2;; esac; } || { printf "%s\n" "$2: requires an argument" >&2 && exit 2 ; }; }
endofline=$(printf '\1\3\3\7')
if [ "$#" != 0 ]; then
  set -- "$@" "$endofline"
  while [ "$1" != "$endofline" ]; do
    opt="$1"; shift
    case "$opt" in
      --install) install && exit 0;;
      --uninstall) uninstall && exit 0;;
      -o|--number)
      assert_argument "$1" "$opt"
      phonelist="$1"
      shift
      ;;
      -t|--text)
      assert_argument "$1" "$opt"
      text="$1"
      shift
      ;;
      -h|--help) display_help; exit 0;;
      -v|--version) printf "%-8s %-1s %s\n" "Version" ":" "$currentVersion" "Revision" ":" "$rev_date"; exit 0;;
      -|''|[!-]*) set -- "$@" "$opt";;
      --*=*)      set -- "${opt%%=*}" "${opt#*=}" "$@";;
      -[!-]?*)    set -- $(echo "${opt#-}" | sed 's/\(.\)/ -\1/g') "$@";;
      --)         while [ "$1" != "$endofline" ]; do set -- "$@" "$1"; shift; done;;
      -*)         usage_error "Unknown option: '$opt'";;
      *)          exit 2;;
    esac
  done
  shift
else
  # Interactive mode
  interactive
fi
# END OPTION PARSING
header_intro() {
  {
    printf "${csky}%s\n" "# # # # # # # # # # # # # # # # # # # # # #"
    printf "%s%s\n" "#${clyl} SendWA - Send Whatsapp from Terminal ! ${csky} #"
    printf "%s\n" "# # # # # # # # # # # # # # # # # # # # # #"
    echo
  }
}
main() {
  _not_interactive=y
  formphone && _send
}
main
