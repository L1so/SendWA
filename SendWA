#!/bin/bash
# shellcheck disable=SC2030,SC2086,SC2181,SC2031,SC2015,SC2154
currentVersion="v1.2"; rev_date="11 Jan 2023"; mp="$HOME/.sendwa"; envfile="$mp/file.env"
sendthisjson="$mp/temporary.json"; rd_out=/dev/stdout
if [ ! -d "$mp" ] && [ "$1" != "--install" ]; then
  >&2 printf "%s\n" "SendWA is not installed" "Please retry this script: $0 --install"
  exit 1
fi
[ -d "$mp" ] && echo "{}" > $sendthisjson
[ -f "$envfile" ] && . $envfile
_WA_PROVIDER=$(echo "$WA_PROVIDER" | sed 's/./\U&/')
# Required Function
is_installed() { command -v $1 >/dev/null 2>&1; }
_logger() {
  [ "$1" = "n" ] && _ns="\n" && shift
  printf "%b${_ns}" "${clyl}${_not_interactive:+$(date +"[%d %b %Y %l:%M:%S %p %Z]") }${csky}$*${creset}" > $rd_out && unset _ns
}
_dogger() {
  [ "$1" = "n" ] && _ns="\n" && shift
  >&2 printf "%b${_ns}" "${clyl}${_not_interactive:+$(date +"[%d %b %Y %l:%M:%S %p %Z]") }${cred}$*${creset}" > $rd_out && unset _ns
}
_checkmark() {
  printf "\033[65G%b\n" "${cgreen}[\342\234\224]${creset}"
}
_crossmark() {
  printf "\033[65G%b\n" "${cred}[\342\235\214]${creset}"
}
_packjson() {
  _argNumber="$1"
  _argText="$2"
  if [ -n "$_is_image" ]; then
    if [ "$WA_PROVIDER" = "onesender" ]; then
      $jq --arg thephone "$_argNumber" --arg thetext "$_argText" --arg theimage "$_img_file" \
      '. += {"recipient_type":"individual","to":"\($thephone)","type":"image","image":{"link": "\($theimage)", "caption": "\($thetext)"}}' \
      $sendthisjson > /tmp/temp.json && mv /tmp/temp.json $sendthisjson
    elif [ "$WA_PROVIDER" = "fonnte" ]; then
      $jq --arg thephone "$_argNumber" --arg thetext "$_argText" --arg theimage "$_img_file" \
      '. += {"target":"\($thephone)","message":"\($thetext)","url": "\($theimage)"}' \
      $sendthisjson > /tmp/temp.json && mv /tmp/temp.json $sendthisjson
    fi
  else
    if [ "$WA_PROVIDER" = "onesender" ]; then
      $jq --arg thephone "$_argNumber" --arg thetext "$_argText" \
      '. += {"recipient_type":"individual","to":"\($thephone)","type":"text","text":{"body": "\($thetext)"}}' \
      $sendthisjson > /tmp/temp.json && mv /tmp/temp.json $sendthisjson
    elif [ "$WA_PROVIDER" = "fonnte" ]; then
      $jq --arg thephone "$_argNumber" --arg thetext "$_argText" '. += {"target":"\($thephone)","message":"\($thetext)"}' \
      $sendthisjson > /tmp/temp.json && mv /tmp/temp.json $sendthisjson
    fi
  fi
}
_ask_input() {
  unset _limit _limitnum _limitnumop
  [ "$1" = "l" ] && _limit=y && shift
  [ "$1" = "ln" ] && _limitnum=y && shift
  [ "$1" = "lno" ] && _limitnumop=y && shift
  _rclyl=$'\001\e[00;93m\002'; _rcsky=$'\001\e[00;96m\002'; _rcres=$'\001\e[0m\002'; _question="$1"; _thevar="$2"
  read -p "${_rclyl}${_not_interactive:+$(date +"[%D %T]") }${_rcsky}${_question}: ${_rcres}" -e "$_thevar"
  _isivar="${!_thevar}"
  if [ -n "$_limit" ]; then
    while [ "${#_isivar}" -lt 8 ]; do
      read -p "${_rclyl}${_not_interactive:+$(date +"[%D %T]") }${_rcsky}${_question} (Minimum is 8 character): ${_rcres}" -e "$_thevar"
      _isivar="${!_thevar}"
    done
  elif [ -n "$_limitnum" ] || [ -n "$_limitnumop" ]; then
    while [ "${#_isivar}" -lt 8 ] || [ -z "${_isivar##*[!0-9]*}" ]; do
      { [ -n "$_limitnumop" ] && [ -z "$_isivar" ]; } && break
      read -p "${_rclyl}${_not_interactive:+$(date +"[%D %T]") }${_rcsky}${_question} (Minimum is 8 digit): ${_rcres}" -e "$_thevar"
      _isivar="${!_thevar}"
    done
  fi
}
cleanup() {
  tput cnorm
  tput sgr0
  rm -f $sendthisjson
}
trap 'cleanup; trap - EXIT; exit' EXIT INT HUP
# End Required Function
disable_color() {
  unset cred cgreen cyellw cblue cyan csky clyl creset
}
# Coloring
if [ "$(tput colors)" -ne "256" ]; then
  disable_color
else
  if [ -t 1 ]; then
    # Non bold
    cred=$(tput sgr0; tput setaf 1 ${is_bsd:+0 0}); clyl=$(tput sgr0; tput setaf 11 ${is_bsd:+0 0})
    cgreen=$(tput sgr0; tput setaf 2 ${is_bsd:+0 0}); cyan=$(tput sgr0; tput setaf 6 ${is_bsd:+0 0})
    cyellw=$(tput sgr0; tput setaf 215 ${is_bsd:+0 0}); csky=$(tput sgr0; tput setaf 14 ${is_bsd:+0 0})
    # Bold
    cbgreen=$(tput bold; tput setaf 2 ${is_bsd:+0 0}); cbsky=$(tput bold; tput setaf 14 ${is_bsd:+0 0})
    # Reset color
    creset=$(tput sgr0)
  else
    disable_color
  fi
fi
header_intro() {
  {
    printf "${cyan}%s\n" "# # # # # # # # # # # # # # # # # # # # # #"
    printf "%s%s\n" "#${clyl} SendWA - Send Whatsapp from Terminal ! ${cyan} #"
    printf "%s\n" "# # # # # # # # # # # # # # # # # # # # # #${creset}"
  }
}
_trimspace() {
    _trimvar="$*"
    # remove leading whitespace characters
    _trimvar="${_trimvar#"${_trimvar%%[![:space:]]*}"}"
    # remove trailing whitespace characters
    _trimvar="${_trimvar%"${_trimvar##*[![:space:]]}"}"
    printf '%s' "$_trimvar"
}
contactlist() {
  [ ! -s "$mp/contact.list" ] && { _dogger n "Contact list is empty"; exit 1 ; }
  printf "+%63s+\n" | tr ' ' '-'
  printf "| %-30s | %-15s | %-10s |\n" "Contact Name" "Contact Number" "Short Name"
  printf "+%63s+\n" | tr ' ' '='
  awk -F '|' '{ printf("| %-30s | %-15s | %-10s |\n", $1, substr($2, 1, length($2)-4)"****", $3) }' "$mp/contact.list"
  printf "+%63s+\n" | tr ' ' '-'
}
printenv() {
  printf "%s\n" "sendwa is alias to ${mp}/sendwa.sh"
  tail -n +2 $mp/file.env
}
# Define binary variable
_jq_path="$mp/bin/jq"
is_installed jq && jq="jq" || jq="$_jq_path/jq"
_shellect_path="$mp/bin/shellect"
shellect=$_shellect_path/shellect
shellect() { $shellect -b "${cbsky}SendWA${creset} - Powered by ${cbgreen}${_WA_PROVIDER:-Shell Script}" "$@"; }
# Prioritize curl over wget
if is_installed curl; then
  # 0 Implies curl
  _fg=c
elif is_installed wget; then
  # 1 Implies wget
  _fg=w
else
  _dogger n "Neither wget nor curl is exist" "Please install it first"
  exit 1
fi
_fgrab() {
  ddl_input="$1"
  if [ "$_fg" = "c" ]; then
    case "$ddl_input" in
      imgpath) shift; _file="$1"
      set -- -X POST https://api.imgbb.com/1/upload?expiration=300\&key=${_IMGBB_API} -F image=@${_file};;
      *) set -- -L --connect-timeout 5 --retry 5 --retry-delay 0 -o $2 ${ddl_input};;
    esac
    curl -s "$@"
  elif [ "$_fg" = "w" ]; then
    case "$ddl_input" in
      # imgpath) { _dogger n "This function is not available on wget" && return 1; };shift; _file="$1"
      #   set -- -S --method PUT --header "Max-Days: 1" --header "Max-Downloads: 1" --body-file=${_file} https://transfer.sh/${_file##*/} -O- -nv;;
      # del) shift; _filedel="$1"; set -- -q --method DELETE ${_filedel};;
      *) set -- -qO $2 $ddl_input;;
    esac
    wget "$@" 2>&1
  fi
}
_pickProvider() {
  _logger n "Pick a WA Gateway Provider: "
  select _provider in "$@"; do
    [ -n "$_provider" ] && { _provider=$(echo "$_provider" | tr '[:upper:]' '[:lower:]') && break; }
  done
}
assert_file() {
  if [ "$1" = "img" ]; then
    shift; _img_source="${1/#\~/$HOME}"; _is_image=y; _IMGBB_API="e8b28f1e0553caa8c140b12ef7561d61"
    if printf '%s' "$_img_source" | grep -qE '(https?|ftp|file)://[-[:alnum:]\+&@#/%?=~_|!:,.;]+'; then
      _img_file="$_img_source"
    elif file "$_img_source" | grep -qE 'image|bitmap'; then
      # Upload the image first
      _logger n "Uploading image..."
      _img_file=$(_fgrab imgpath "$_img_source" | sed -n 's|.*"url":"\([^"]*\)".*|\1|p' | tr -d '\\')
      _logger n "Image is uploaded on ${cgreen}${_img_file}${csky} (expiring in 5 minutes)"
    else
      _dogger n "Not an image file"
      exit 1
    fi
  fi
}
# Most commonly would be 64 bit
case "$(uname -m)" in
  *x86_64*|*amd64*)
  arch="x86_64"
  jq_arch="64"
  ;;
  *i?86*)
  arch="i386"
  jq_arch="32"
  ;;
  *arm*|*aarch*)
  case "$(getconf LONG_BIT)" in
    *64*) arch="aarch64";;
    *) arch="armhf";;
  esac
  ;;
  *) die "Architecture not found"; exit 1;;
esac
depencheck() {
  # jq binary
  if [ "$jq" != "jq" ] && [ ! -f "$_jq_path/jq" ]; then
    mkdir -p $_jq_path
    case "$arch" in
      "armhf"|"aarch64") jqddl="https://github.com/L1so/benchy/raw/main/binary/jq/jq_${arch}";;
      *) jqddl="https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux${jq_arch}";;
    esac
    _fgrab "$jqddl" "$_jq_path/jq"
    [ $? -eq 0 ] && chmod u+x $_jq_path/jq
  fi
  # shellect script
  mkdir -p $_shellect_path
  _fgrab "https://raw.githubusercontent.com/huijunchen9260/shellect/main/shellect" "$_shellect_path/shellect"
  [ $? -eq 0 ] && chmod u+x $shellect
}
detect_profile() {
  if [ -n "$PROFILE" -a -f "$PROFILE" ]; then
    echo "$PROFILE"
    return
  fi
  detected_profile=''
  shelltype="$(basename "/$SHELL")"

  if [ "$shelltype" = "bash" ]; then
    if [ -f "$HOME/.bashrc" ]; then
      detected_profile="$HOME/.bashrc"
    elif [ -f "$HOME/.bash_profile" ]; then
      detected_profile="$HOME/.bash_profile"
    fi
  elif [ "$shelltype" = "zsh" ]; then
    detected_profile="$HOME/.zshrc"
  fi

  if [ -z "$detected_profile" ]; then
    if [ -f "$HOME/.profile" ]; then
      detected_profile="$HOME/.profile"
    elif [ -f "$HOME/.bashrc" ]; then
      detected_profile="$HOME/.bashrc"
    elif [ -f "$HOME/.bash_profile" ]; then
      detected_profile="$HOME/.bash_profile"
    elif [ -f "$HOME/.zshrc" ]; then
      detected_profile="$HOME/.zshrc"
    fi
  fi
  echo "$detected_profile"
}
_find_by_shortname() {
  _thesn="$1"; [ ! -s "$mp/contact.list" ] && { _dogger n "Contact list is empty"; exit 1; }
  awk -v no="$_thesn" -F'|' '$NF ~ no { print $2 }' "$mp/contact.list" 2>/dev/null
}
_send() {
  [ "$WA_PROVIDER" = "onesender" ] && _is_bearer=y
  if [ "$_fg" = "c" ]; then
    _httpcode=$(
    curl -w "%{http_code}" -s -o /dev/null \
    --location --request POST "$WA_API_URL" \
    --header "Authorization: ${_is_bearer:+Bearer} ${WA_API_KEY}" \
    --header 'Content-Type: application/json' \
    --data-binary "@${sendthisjson}"
    )
    if [ "$_httpcode" = 200 ]; then _logger n "Successfully sent message !" && return 0; else _dogger n "Request failed to get through !" && return 1; fi
  elif [ "$_fg" = "w" ]; then
    wget --no-check-certificate -qO /dev/null \
    --method POST --timeout=0 \
    --header "Authorization: ${_is_bearer:+Bearer} ${WA_API_KEY}" \
    --header 'Content-Type: application/json' \
    --body-file="${sendthisjson}" "$WA_API_URL"
    if [ $? -eq 0 ]; then _logger n "Successfully sent message !" && return 0; else _dogger n "Request failed to get through !" && return 1; fi
  fi
}
_send_test() {
  if [ "$_provider" = "onesender" ]; then
    _data_raw='{
	"recipient_type": "individual",
	"to": "'"$wa_test_phone_number"'",
	"type": "text",
	"text": {
		"body": "If you receive this message, this means SendWA has been installed correctly"
	}
}'
  elif [ "$_provider" = "fonnte" ]; then
    _data_raw='{
	"target": "'"$wa_test_phone_number"'",
	"message": "If you receive this message, this means SendWA has been installed correctly"
}'
  fi
  [ "$_provider" = "onesender" ] && is_bearer_test=y
  if [ "$_fg" = "c" ]; then
    curl -s -o /dev/null --location --request POST "$wa_api_url" \
    --header "Authorization: ${_is_bearer_test:+Bearer} ${wa_api_key}" \
    --header 'Content-Type: application/json' \
    --data-raw "$_data_raw"
  elif [ "$_fg" = "w" ]; then
    wget --no-check-certificate -qO /dev/null \
    --method POST --timeout=0 \
    --header "Authorization: Bearer ${wa_api_key}" \
    --body-data "$_data_raw" \
    "$wa_api_url"
  fi
}
install() {
  _current_script_directory=$(dirname "$0")
  [ -d "$mp" ] && { _logger n "Already installed"; exit 0; }
  [ ! -f "${_current_script_directory}/update.sh" ] && { _dogger n "Missing files, please re-download from GitHub"; exit 1 ; }
  header_intro; unset _not_interactive
  _pickProvider "OneSender" "Fonnte"
  [ "$_provider" = "fonnte" ] && wa_api_url="https://api.fonnte.com/send" || _ask_input l "Please insert your API URL" wa_api_url
  _ask_input l "Please insert your API Key" wa_api_key
  _ask_input lno "Please insert your (international) phone number (optional)" wa_test_phone_number
  if [ -n "$wa_test_phone_number" ]; then
    _ask_input "We will send test message to $wa_test_phone_number, press any key to proceed" _just_do_the_thang
    _send_test
    [ $? -eq 0 ] || exit 1
  fi
  # Install configuration file
  _logger "Installing dependency"
  depencheck
  [ $? -eq 0 ] && _checkmark || { _crossmark; exit 0 ; }
  _logger "Creating configuration file on $mp"
  mkdir -p $mp/logs $mp/bin $mp/gallery
  cp ./update.sh $mp/update.sh && chmod 755 $mp/update.sh
  cp ./file.env $envfile && chmod 600 $envfile
  [ $? -eq 0 ] && _checkmark || { _crossmark; exit 0 ; }
  # Install file
  _logger "Install the script to $mp"
  _profile="$(detect_profile)"
  if [ "$_profile" ]; then
    cp "$(readlink -f $0)" "${mp}/sendwa.sh"; chmod u+x "${mp}/sendwa.sh"
    echo "alias sendwa=\"$mp/sendwa.sh\"" >> $_profile
    echo "alias sendwa-update=\"$mp/update.sh\"" >> $_profile
  fi
  [ $? -eq 0 ] && _checkmark || { _crossmark; exit 0 ; }
  # Putting api config to env file
  cat <<EOF >> $envfile
WA_PROVIDER="$_provider"
WA_API_KEY="$wa_api_key"
WA_API_URL="$wa_api_url"
WA_ALIAS_LOCATION="$_profile"
EOF
  # Closing
  printf "${cgreen}%b${creset}\n" "SendWA has been installed" "Please execute . $_profile to apply changes" > $rd_out
}
uninstall() {
  unset _not_interactive
  # Remove alias from sourced file
  [ -f "$envfile" ] && . $envfile || { _dogger n "Something went wrong please retry" && exit 1; }
  _logger "Removing SendWA alias from $WA_ALIAS_LOCATION"
  grep -v "alias sendwa=\"$mp/sendwa.sh\"" $WA_ALIAS_LOCATION > /tmp/temp_reallytemp_bashrc && mv /tmp/temp_reallytemp_bashrc $WA_ALIAS_LOCATION
  grep -v "alias sendwa-update=\"$mp/update.sh\"" $WA_ALIAS_LOCATION > /tmp/temp_reallytemp_bashrc && mv /tmp/temp_reallytemp_bashrc $WA_ALIAS_LOCATION
  [ $? -eq 0 ] && _checkmark || { _crossmark; exit 0 ; }
  _logger "Removing directory $mp"
  rm -rf -- "$mp"
  [ $? -eq 0 ] && _checkmark || { _crossmark; exit 0 ; }
}
_split_by_comma() {
  _arr_source="$1"
  _arr_name="$2"
  _arr_source=$(tr -d "[:space:]" <<< "$_arr_source")
  IFS=',' read -ra ${_arr_name} <<< "$_arr_source"
}
formphone() {
  _delim=""; _joined=""
  if [ -n "$_is_sn" ]; then
    # Converting shortname to phone number
    for sn in "${arr_shortname[@]}"; do arr_phonelist+=( $(awk -v no="$sn" -F'|' '$NF ~ no { print $2 }' "$mp/contact.list") ); done
  fi
  for phone in "${arr_phonelist[@]}"; do
    [ -z "${phone##*[!0-9]*}" ] && { _dogger n "$phone must be valid number" && return 1 ; }
    _joined="$_joined$_delim$phone"; _delim=","
  done
  _packjson "$_joined" "$_text"
}
interactive() {
  # Select menu
  _menuvalue=$(printf '%s\n' "Send Message" "Add/Delete Contact" "Select from contact" | shellect -t "Please choose your preferred action (Press Q to Quit)")
  case "$_menuvalue" in
    "Send Message")
    # Ask phone number to
    _ask_input ln "Target phone number" _arg_target_number
    # Ask string to be sent
    _ask_input "Type string to send" _arg_target_string
    # Ask images (if any)
    _ask_input "Images link or path (optional)" _arg_target_image
    # Validate the variable
    if [ "$_arg_target_number" ] && [ "$_arg_target_string" ]; then
      [ -n "$_arg_target_image" ] && assert_file img "$_arg_target_image"
      _packjson "$_arg_target_number" "$_arg_target_string" && _send
    else
      _dogger n "One of the input is empty"; return 1
    fi
      ;;
    "Add/Delete Contact")
    _selectvalue=$(printf '%s\n' "Add Contact" "Delete Contact" | shellect -t "Please choose your preferred action (Press Q to Quit)")
    case "$_selectvalue" in
      "Add Contact")
      # Ask Contact Name
      _ask_input "Contact name" _arg_contact_name
      _ask_input ln "Phone number" _arg_target_number
      if [ "$_arg_contact_name" ] && [ "$_arg_target_number" ]; then
        # Generating shortname
        _arg_ranum="$(awk -v min=1000 -v max=9999 'BEGIN{srand(); print int(min+rand()*(max-min+1))}')"
        _arg_contact_flower=$(echo "${_arg_contact_name%"${_arg_contact_name#?}"}" | tr '[:upper:]' '[:lower:]')
        _arg_contact_shortname="${_arg_contact_flower}${_arg_ranum}"
        # Populate contact list
        echo "$_arg_contact_name|$_arg_target_number|${_arg_contact_shortname}" >> $mp/contact.list
        _logger n "Successfully saved contact, your shortname is: $_arg_contact_shortname"
      else
        _dogger n "Error adding contact, please make sure the input is correct"
        return 1
      fi
        ;;
      "Delete Contact")
      if [ -s "$mp/contact.list" ]; then
        _subselectvalue=$(awk -F'|' '{ printf("%-25s | %-15s | %5s\n", $1, $2, $3) ; }' "$mp/contact.list" | shellect -t "Delete selected contact")
        [ -z "$_subselectvalue" ] && return 1
        # Remove line containing list
        _arg_target_name=$(echo "$_subselectvalue" | awk -F'|' '{ gsub(/^[ \t]+|[ \t]+$/, "", $1); print $1; exit }')
        _arg_target_number=$(echo "$_subselectvalue" | awk -F'|' '{ gsub(/^[ \t]+|[ \t]+$/, "", $2); print $2; exit }')
        awk -v number="$_arg_target_number" '$0 !~ number' $mp/contact.list > $mp/temp_contact.list && mv $mp/temp_contact.list $mp/contact.list
        _logger n "Successfully deleting ${_arg_target_name} from contact list !"
      else
        _dogger n "Contact list is empty" && return 1
      fi
        ;;
    esac
    ;;
    "Select from contact")
    if [ -s "$mp/contact.list" ]; then
      _selectvalue=$(awk -F'|' '{ printf("%-25s | %-15s | %5s\n", $1, $2, $3) ; }' "$mp/contact.list" | shellect -t "Select your contact")
      [ -z "$_selectvalue" ] && return 1
      # Process the selected list
      _arg_target_number=$(echo "$_selectvalue" | awk -F'|' '{ print $2 }')
      # Ask string to be sent
      _ask_input l "Type string to send" _arg_target_string
      # Ask images (if any)
      _ask_input "Images link or path (optional)" _arg_target_image
      # Validate the variable
      if [ "$_arg_target_string" ]; then
        [ -n "$_arg_target_image" ] && assert_file img "$_arg_target_image"
        _packjson "$_arg_target_number" "$_arg_target_string" && _send
      else
        _dogger n "One of the input is empty"; return 1
      fi
    else
      _dogger n "Contact list not found"
      return 1
    fi
    ;;
    "") return 1;;
  esac
}
# BEGIN OPTION PARSING
display_help() {
  cat <<'EOT'
Usage: sendwa [OPTION]...
  Options:
  -o, --number=NUM        Number to send message
  -S, --shortname=ARG     Shortname to send message
  -t, --text=STRING       Text to send
  -g, --text-file=FILE    Pick file containing string to send
  -i, --image=ARG         Send image file (ARG could be link to image or path to image)
  -l, --contact-list      Print contact list
  -p, --print-env         Print full path to script
  -q, --quiet             Quiet mode
  -h, --help              Display this help section
  -v, --version           Display version
EOT
}
usage_error () { printf "%s\n%s\n" "$1" "Try 'sendwa --help' to view available option" >&2; exit 2; }
assert_argument () { { test "$1" != "$endofline" && case "$1" in -*) >&2 printf "%s\n" "$opt: Illegal input parameter ($1)"; exit 2;; esac; } || { printf "%s\n" "$2: requires an argument" >&2 && exit 2 ; }; }
endofline=$(printf '\1\3\3\7')
if [ "$#" != 0 ]; then
  set -- "$@" "$endofline"; _not_interactive=y
  while [ "$1" != "$endofline" ]; do
    opt="$1"; shift
    case "$opt" in
      --install) install && exit 0;;
      --uninstall) uninstall && exit 0;;
      -o|--number)
      _is_num=y; phonelist="$1"
      if [ "$_is_sn" ]; then
        _dogger n "This option cannot coexist with -S"
        exit 1
      fi
      assert_argument "$1" "$opt"
      _split_by_comma "$phonelist" arr_phonelist
      shift
      ;;
      -t|--text)
      assert_argument "$1" "$opt"
      _is_text="y"; _text="$1"
      if [ "$_is_from_file" ]; then
        _dogger n "This option cannot coexist with -g"
        exit 1
      fi
      shift
      ;;
      -g|--text-file)
      _is_from_file="y"; _textfile="$1";
      if [ "$_is_text" ]; then
        _dogger n "This option cannot coexist with -t"
        exit 1
      fi
      assert_argument "$1" "$opt"
      if [ -s "$_textfile" ]; then
        _logger n "Retrieving content of $_textfile" && _text=$(cat $_textfile)
      else
        _dogger n "$_textfile is empty"; exit 1
      fi
      shift
      ;;
      -i|--image)
      _is_image=y; _img_input="$1"
      assert_argument "$1" "$opt"
      assert_file img "$_img_input"
      shift
      ;;
      -S|--shortname)
      _is_sn=y; _sn_input="$1"
      if [ "$_is_num" ]; then
        _dogger n "This option cannot coexist with -o"
        exit 1
      fi
      assert_argument "$1" "$opt"
      _split_by_comma "$_sn_input" arr_shortname
      shift
      ;;
      -l|--contact-list) contactlist; exit 0;;
      -p|--print-env) printenv; exit 0;;
      -q|--quiet) rd_out=/dev/null;;
      -h|--help) display_help; exit 0;;
      -v|--version) printf "%-8s %-1s %s\n" "Version" ":" "$currentVersion" "Revision" ":" "$rev_date"; exit 0;;
      -|''|[!-]*) set -- "$@" "$opt";;
      --*=*)      set -- "${opt%%=*}" "${opt#*=}" "$@";;
      -[!-]?*)    set -- $(echo "${opt#-}" | sed 's/\(.\)/ -\1/g') "$@";;
      --)         while [ "$1" != "$endofline" ]; do set -- "$@" "$1"; shift; done;;
      -*)         usage_error "Unknown option: '$opt'";;
      *)          exit 2;;
    esac
  done
  shift
else
  # Interactive mode
  interactive; exit 0
fi
# END OPTION PARSING
main() {
  formphone && _send
}
main
