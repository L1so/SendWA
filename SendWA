#!/bin/sh
# shellcheck disable=SC2183,SC2030,SC2086,SC2181,SC2031
currentVersion="v1.0"; rev_date="2 Jan 2023"; mp="$HOME/.sendwa"; envfile="$mp/file.env"
sendthisjson="$mp/temporary.json"; truenv="$mp/sw.env"
if [ ! -d "$mp" ] && [ "$1" != "--install" ]; then
  >&2 printf "%s\n" "SendWA is not installed" "Please retry this script: $0 --install"
  exit 1
fi
[ -f "$envfile" ] && . $envfile
# Required Function
is_installed() { command -v $1 >/dev/null 2>&1; }
_logger() {
  [ "$1" = "n" ] && _ns="\n" && shift
  printf "%b${_ns}" "${clyl}${_not_interactive:+$(date +"[%D %T]") }${csky}$*${creset}" && unset _ns
}
_dogger() {
  [ "$1" = "n" ] && _ns="\n" && shift
  >&2 printf "%b${_ns}" "${clyl}${_not_interactive:+$(date +"[%D %T]") }${cred}$*${creset}" && unset _ns
}
_checkmark() {
  printf "\033[55G%b\n" "${cgreen}[V]${creset}"
}
_crossmark() {
  printf "\033[55G%b\n" "${cred}[X]${creset}"
}
_packjson() {
  echo "[]" > $sendthisjson
  _argNumber="$1"
  _argText="$2"
  if [ -n "$_is_image" ]; then
    $jq --arg thephone "$_argNumber" --arg thetext "$_argText" --arg theimage "$_img_file_base64" \
    '. += [{"recipient_type":"individual","to":"\($thephone)","type":"image","image":{"raw": "\($theimage)", "caption": "\($thetext)"}}]' \
    $sendthisjson > /tmp/temp.json && mv /tmp/temp.json $sendthisjson
  else
    $jq --arg thephone "$_argNumber" --arg thetext "$_argText" \
    '. += [{"recipient_type":"individual","to":"\($thephone)","type":"text","text":{"body": "\($thetext)"}}]' $sendthisjson > /tmp/temp.json && mv /tmp/temp.json $sendthisjson
  fi
}
_ask_input() {
  _question="$1"
  _thevar="$2"
  _logger "$_question"; read -r "$_thevar"
}
cleanup() {
  tput cnorm
  tput sgr0
  rm -f $sendthisjson
}
trap 'cleanup; trap - EXIT; exit' EXIT INT HUP
# End Required Function
disable_color() {
  unset cred cgreen cyellw cblue cyan csky clyl creset
}
# Coloring
if ! is_installed perl || [ "$(tput colors)" -ne "256" ]; then
  disable_color
else
  if [ -t 1 ]; then
    # Non bold
    cred=$(tput sgr0; tput setaf 1 ${is_bsd:+0 0}); clyl=$(tput sgr0; tput setaf 11 ${is_bsd:+0 0})
    cgreen=$(tput sgr0; tput setaf 2 ${is_bsd:+0 0}); cyan=$(tput sgr0; tput setaf 6 ${is_bsd:+0 0})
    cyellw=$(tput sgr0; tput setaf 215 ${is_bsd:+0 0}); csky=$(tput sgr0; tput setaf 14 ${is_bsd:+0 0})
    # Reset color
    creset=$(tput sgr0)
  else
    disable_color
  fi
fi
header_intro() {
  {
    printf "${cyan}%s\n" "# # # # # # # # # # # # # # # # # # # # # #"
    printf "%s%s\n" "#${clyl} SendWA - Send Whatsapp from Terminal ! ${cyan} #"
    printf "%s\n" "# # # # # # # # # # # # # # # # # # # # # #${creset}"
  }
}
# Define binary variable
_jq_path="$mp/bin/jq"
is_installed jq && jq="jq" || jq="$_jq_path/jq"
_shellect_path="$mp/bin/shellect"
shellect=$_shellect_path/shellect
# Prioritize curl over wget
if is_installed curl; then
  # 0 Implies curl
  _filegrab=c
elif is_installed wget; then
  # 1 Implies wget
  _filegrab=w
else
  _dogger n "Neither wget nor curl is exist" "Please install it first"
  exit 1
fi
_fgrab() {
  ddl_input="$1"
  if [ "$_filegrab" = "c" ]; then
    case "$ddl_input" in
      *[Jj][Pp][Gg]|[Pp][Nn][Gg]|[Jj][Pp][Ee][Gg]*) _curl_opt="-O";;
      *) _curl_opt="-o $2";;
    esac
    curl -kLs --connect-timeout 5 --retry 5 --retry-delay 0 $_curl_opt $ddl_input
  elif [ "$_filegrab" = "w" ]; then
    case "$ddl_input" in
      *[Jj][Pp][Gg]|[Pp][Nn][Gg]|[Jj][Pp][Ee][Gg]*) _wget_opt="-P";;
      *) _wget_opt="-O";;
    esac
    wget -q $_wget_opt $2 $ddl_input
  fi
}
# Most commonly would be 64 bit
case "$(uname -m)" in
  *x86_64*|*amd64*)
  arch="x86_64"
  jq_arch="64"
  ;;
  *i?86*)
  arch="i386"
  jq_arch="32"
  ;;
  *arm*|*aarch*)
  case "$(getconf LONG_BIT)" in
    *64*) arch="aarch64";;
    *) arch="armhf";;
  esac
  ;;
  *) die "Architecture not found"; exit 1;;
esac
depencheck() {
  # jq binary
  if [ "$jq" != "jq" ] && [ ! -f "$_jq_path/jq" ]; then
    mkdir -p $_jq_path
    case "$arch" in
      "armhf"|"aarch64") jqddl="https://github.com/L1so/benchy/raw/main/binary/jq/jq_${arch}";;
      *) jqddl="https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux${jq_arch}";;
    esac
    _fgrab "$jqddl" "$_jq_path/jq"
    [ $? -eq 0 ] && chmod u+x $_jq_path/jq
  fi
  # shellect script
  mkdir -p $_shellect_path
  _fgrab "https://raw.githubusercontent.com/huijunchen9260/shellect/main/shellect" "$_shellect_path/shellect"
  [ $? -eq 0 ] && chmod u+x $shellect
}
detect_profile() {
  if [ -n "$PROFILE" -a -f "$PROFILE" ]; then
    echo "$PROFILE"
    return
  fi
  detected_profile=''
  shelltype="$(basename "/$SHELL")"

  if [ "$shelltype" = "bash" ]; then
    if [ -f "$HOME/.bashrc" ]; then
      detected_profile="$HOME/.bashrc"
    elif [ -f "$HOME/.bash_profile" ]; then
      detected_profile="$HOME/.bash_profile"
    fi
  elif [ "$shelltype" = "zsh" ]; then
    detected_profile="$HOME/.zshrc"
  fi

  if [ -z "$detected_profile" ]; then
    if [ -f "$HOME/.profile" ]; then
      detected_profile="$HOME/.profile"
    elif [ -f "$HOME/.bashrc" ]; then
      detected_profile="$HOME/.bashrc"
    elif [ -f "$HOME/.bash_profile" ]; then
      detected_profile="$HOME/.bash_profile"
    elif [ -f "$HOME/.zshrc" ]; then
      detected_profile="$HOME/.zshrc"
    fi
  fi
  echo "$detected_profile"
}
_send() {
  if [ "$_filegrab" = "c" ]; then
    _httpcode=$(
    curl -w "%{http_code}" -s -o /dev/null \
    --location --request POST "$WA_API_URL" \
    --header "Authorization: Bearer ${WA_API_KEY}" \
    --data-binary "@${sendthisjson}"
    )
    if [ "$_httpcode" = 200 ]; then _logger n "Successfully sent message !" && return 0; else _dogger n "Request failed to get through !" && return 1; fi
  elif [ "$_filegrab" = "w" ]; then
    wget --no-check-certificate -qO /dev/null \
    --method POST --timeout=0 \
    --header "Authorization: Bearer ${WA_API_KEY}" \
    --body-file="${sendthisjson}" "$WA_API_URL"
    if [ $? -eq 0 ]; then _logger n "Successfully sent message !" && return 0; else _dogger n "Request failed to get through !" && return 1; fi
  fi
}
_send_test() {
  if [ "$_filegrab" = "c" ]; then
    curl -s -o /dev/null --location --request POST "$wa_api_url" \
    --header "Authorization: Bearer ${wa_api_key}" \
    --data-raw '{ "recipient_type": "individual", "to": "'"$wa_test_phone_number"'", "type": "text", "text": { "body": "If you receive this message, this means the test is successful" }
    }'
  elif [ "$_filegrab" = "w" ]; then
    wget --no-check-certificate -qO /dev/null \
    --method POST --timeout=0 \
    --header "Authorization: Bearer ${wa_api_key}" \
    --body-data '{ "recipient_type": "individual", "to": "'"$wa_test_phone_number"'", "type": "text", "text": { "body": "If you receive this message, this means the test is successful" }
  }' "$wa_api_url"
  fi
}
install() {
  [ -d "$mp" ] && { _logger n "Already installed"; exit 0; }
  header_intro; unset _not_interactive
  _ask_input "Please insert your API URL: " wa_api_url
  _ask_input "Please insert your API Key: " wa_api_key
  _ask_input "Please insert your (international) phone number: " wa_test_phone_number
  _logger "Testing your configuration"
  _send_test
  [ $? -eq 0 ] && _checkmark || { _crossmark; exit 0 ; }
  # Install configuration file
  _logger "Installing dependency"
  depencheck
  [ $? -eq 0 ] && _checkmark || { _crossmark; exit 0 ; }
  _logger "Creating configuration file on $mp"
  mkdir -p $mp/logs $mp/bin $mp/gallery
  [ $? -eq 0 ] && _checkmark || { _crossmark; exit 0 ; }
  # Install file
  _logger "Install the script to $mp"
  _profile="$(detect_profile)"
  if [ "$_profile" ]; then
    cp "$(readlink -f $0)" "${mp}/sendwa.sh"; chmod u+x "${mp}/sendwa.sh"
    echo "alias sendwa=\"$mp/sendwa.sh\"" >> $_profile
  fi
  [ $? -eq 0 ] && _checkmark || { _crossmark; exit 0 ; }
  # Putting api config to env file
  cat <<EOF > $envfile
# DO NOT REMOVE THIS FILE UNDER ANY CIRCUMSTANCE
WA_API_KEY="$wa_api_key"
WA_API_URL="$wa_api_url"
WA_ALIAS_LOCATION="$_profile"
EOF
  # Closing
  _logger n "SendWA has been installed in $mp"
  _logger n "Log out/Log in back to apply changes"
}
uninstall() {
  # Remove alias from sourced file
  [ -f "$envfile" ] && . $envfile || { _dogger n "Something went wrong please retry" && exit 1; }
  _logger "Removing SendWA alias from $WA_ALIAS_LOCATION"
  grep -v "alias sendwa=\"$mp/sendwa.sh\"" $WA_ALIAS_LOCATION > /tmp/temp_bashrc && mv /tmp/temp_bashrc $WA_ALIAS_LOCATION
  [ $? -eq 0 ] && _checkmark || { _crossmark; exit 0 ; }
  _logger "Removing directory $mp"
  rm -rf -- "$mp"
  [ $? -eq 0 ] && _checkmark || { _crossmark; exit 0 ; }
}
formphone() {
  case "$phonelist" in
    *,*)
    phone_list=$(echo "$phonelist" | tr -d '[:space:]' | tr ',' ' ')
    for phone in $phone_list; do
      if [ -z "${phone##*[!0-9]*}" ]; then
        _dogger n "$phone must be valid number"; return 1
      else
        _packjson "$phone" "$_text"
      fi
    done
      ;;
    *)
    if [ -z "${phonelist##*[!0-9]*}" ]; then
      _dogger n "$phonelist must be valid number"; return 1
    else
      _packjson "$phonelist" "$_text"
    fi
      ;;
  esac
}
interactive() {
  # Select menu
  _menuvalue=$(printf '%s\n' "Send Message" "Add Contact" "Select from contact" | $shellect -t "Please choose your preferred action (Press Q to Quit)")
  case "$_menuvalue" in
    "Send Message")
    # Ask phone number to
    _ask_input "Target phone number: " _arg_target_number
    while [ -z "${_arg_target_number##*[!0-9]*}" ]; do _ask_input "Target phone number (must be a number): " _arg_target_number; done
    # Ask string to be sent
    _ask_input "Type string to send: " _arg_target_string
    # Validate the variable
    if [ "$_arg_target_number" ] && [ "$_arg_target_string" ]; then
      _packjson "$_arg_target_number" "$_arg_target_string" && _send
    else
      _dogger n "One of the input is empty"; return 1
    fi
      ;;
    "Add Contact")
    # Ask Contact Name
    _ask_input "Contact name: " _arg_contact_name
    _ask_input "Phone number: " _arg_target_number
    while [ -z "${_arg_target_number##*[!0-9]*}" ]; do _ask_input "Phone number (must be a number): " _arg_target_number; done
    if [ "$_arg_contact_name" ] && [ "$_arg_target_number" ]; then
      # Generating shortname
      _arg_ranum="$(awk -v min=1000 -v max=9999 'BEGIN{srand(); print int(min+rand()*(max-min+1))}')"
      _arg_contact_shortname="${_arg_contact_name%"${_arg_contact_name#?}"}_$_arg_ranum"
      # Populate contact list
      echo "$_arg_contact_name|$_arg_target_number|${_arg_contact_shortname}" >> $mp/contact.list
      _logger n "Successfully saved contact, the shortname is: $_arg_contact_shortname"
    else
      _dogger n "Error adding contact, please make sure the input is correct"
      return 1
    fi
    ;;
    "Select from contact")
    if [ -s "$mp/contact.list" ]; then
      _selectvalue=$(awk -F'|' '{ printf("%-25s | %-15s | %5s\n", $1, $2, $3) ; }' "$mp/contact.list" | $shellect -t "Select your contact")
      [ -z "$_selectvalue" ] && return 1
      # Process the selected list
      _selectvalue_num=$(echo "$_selectvalue" | awk -F'|' '{ print $2 }')
      _ask_input "Type string to send: " _selectvalue_string
      _packjson "$_selectvalue_num" "$_selectvalue_string" && _send
    else
      _dogger n "Contact list not found"
      return 1
    fi
    ;;
    "") return 1;;
  esac
}
# BEGIN OPTION PARSING
display_help() {
  cat <<'EOT'
Usage: sendwa [OPTION]...
  Options:
  -o, --number=NUM        Number to send message
  -t, --text=STRING       Text to send
  -f, --text-file=FILE    Pick file containing string to send
  -i, --image=ARG         Send image file (ARG could be link to image or path to image)
  -h, --help              Display this help section
  -v, --version           Display version
EOT
}
usage_error () { printf "%s\n%s\n" "$1" "Try 'sendwa --help' to view available option" >&2; exit 2; }
assert_argument () { { test "$1" != "$endofline" && case "$1" in -*) >&2 printf "%s\n" "$opt: Illegal input parameter ($1)"; exit 2;; esac; } || { printf "%s\n" "$2: requires an argument" >&2 && exit 2 ; }; }
endofline=$(printf '\1\3\3\7')
if [ "$#" != 0 ]; then
  set -- "$@" "$endofline"; _not_interactive=y
  while [ "$1" != "$endofline" ]; do
    opt="$1"; shift
    case "$opt" in
      --install) install && exit 0;;
      --uninstall) uninstall && exit 0;;
      -o|--number)
      assert_argument "$1" "$opt"
      phonelist="$1"
      shift
      ;;
      -t|--text)
      assert_argument "$1" "$opt"
      _is_text="y"; _text="$1"
      if [ "$_is_from_file" ]; then
        _dogger n "This option cannot coexist with -f"
        exit 1
      fi
      shift
      ;;
      -f|--text-file)
      _is_from_file="y"; _textfile="$1";
      if [ "$_is_text" ]; then
        _dogger n "This option cannot coexist with -t"
        exit 1
      fi
      assert_argument "$1" "$opt"
      if [ -s "$_textfile" ]; then
        _logger n "Retrieving content of $_textfile" && _text=$(cat $_textfile)
      else
        _dogger n "$_textfile is empty"; exit 1
      fi
      shift
      ;;
      -i|--image)
      _is_image=y; _img_input="$1"
      assert_argument "$1" "$opt"
      # Check whether input argument is link or path
      if printf '%s' "$_img_input" | grep -qE '(https?|ftp|file)://[-[:alnum:]\+&@#/%?=~_|!:,.;]+'; then
        # Download the image first
        _img_date=$(date +"%Y_%m_%d_%H_%M_%S")
        mkdir -p /tmp/tem_img_dir && cd /tmp/tem_img_dir
        _fgrab "$_img_input" .
        _thefilename=$(printf '%s' *)
        _thefilename_ext="${_thefilename#*.}"
        mv "$_thefilename" "$mp/gallery/download-${_img_date}.${_thefilename_ext}"
        rm -rf /tmp/tem_img_dir && cd - >/dev/null
        # Store the filename to variable
        _img_file="$mp/gallery/download-${_img_date}.${_thefilename_ext}"
      else
        _img_file="$_img_input"
      fi
      if ! identify "$_img_file" >/dev/null 2>&1; then
        _dogger n "Not an image file"
        exit 1
      fi
      _img_file_base64="data:image/jpeg;base64,$(base64 -w 0 "$_img_file")"
      ;;
      -h|--help) display_help; exit 0;;
      -v|--version) printf "%-8s %-1s %s\n" "Version" ":" "$currentVersion" "Revision" ":" "$rev_date"; exit 0;;
      -|''|[!-]*) set -- "$@" "$opt";;
      --*=*)      set -- "${opt%%=*}" "${opt#*=}" "$@";;
      -[!-]?*)    set -- $(echo "${opt#-}" | sed 's/\(.\)/ -\1/g') "$@";;
      --)         while [ "$1" != "$endofline" ]; do set -- "$@" "$1"; shift; done;;
      -*)         usage_error "Unknown option: '$opt'";;
      *)          exit 2;;
    esac
  done
  shift
else
  # Interactive mode
  interactive; exit 0
fi
# END OPTION PARSING
main() {
  formphone && _send
}
main
